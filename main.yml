---
- name: Ansible Tower backup stored in an S3 bucket
  hosts: "{{ my_devices }}"
  gather_facts: yes
  vars:
    user: "{{ my_user }}"
    version: "{{ my_version }}"
    my_bucket: nleiva-tower
    my_python_libraries: [ "boto", "boto3", "botocore"]
    my_venv: /opt/my-envs/networking
    mtime: ""
    # Pass this as an extra var? but we want this for the remote host and not local host.
    # ansible_python_interpreter=/opt/my-envs/networking/bin/python

  tasks:
    - name: Check if backup already exists
      stat:
        path: "/home/{{ user }}/ansible-tower-setup-{{ version }}/tower-backup-latest.tar.gz"
      register: backup

    - name: Save backup modified time
      set_fact:
        mtime: "{{ '%Y-%m-%d' | strftime(backup.stat.mtime) }}"
      when: backup.stat.exists

    - name: Perform backup (if not already created today)
      become: yes
      command: "./setup.sh -b"
      args:
        chdir: "/home/{{ user }}/ansible-tower-setup-{{ version }}"
      when: mtime != ansible_date_time.date

    - name: Change file ownership and group for Ansible config
      become: yes
      file:
        path: "/home/{{ user }}/ansible-tower-setup-{{ version }}/tower-backup-latest.tar.gz"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: u=rw,g=r,o=r

    - name: Ensure botocore and boto3 modules are installed
      pip:
        name: "{{ my_python_libraries }}"
        # extra_args:   "--user"
        virtualenv: "{{ my_venv }}"

    - name: Upload backup to S3
      aws_s3:
        bucket: "{{ my_bucket }}"
        src: "/home/{{ user }}/ansible-tower-setup-{{ version }}/tower-backup-latest.tar.gz"
        object: "/backups/tower-backup-{{ ansible_date_time.date }}.tar.gz"
        mode: put
        metadata: 'Content-Type=application/x-gzip'
      when: backup.stat.exists
      # I delegate to localhost to use AWS credentials
      # awx user should be able to execute /home/centos
      delegate_to: localhost

