---
- name: Ansible Tower backup stored in an S3 bucket
  hosts: "{{ my_devices }}"
  gather_facts: yes
  vars:
    user: "{{ my_user }}"
    version: "{{ my_version }}"
    check: true
    my_bucket: nleiva-tower
    my_python_libraries: [ "boto", "boto3", "botocore", "selinux"]
    mtime: ""
  # Pass Ansible Tower AWS credentials to remote host (is this secure?). The alternative is to run this on localhost.
  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

  tasks:
    - name: Ensure Python dependencies are installed
      ansible.builtin.pip:
        name: "{{ my_python_libraries }}"
      become: true
      when: check

    - name: Check if backup already exists
      ansible.builtin.stat:
        path: "/home/{{ user }}/ansible-tower-setup-{{ version }}/tower-backup-latest.tar.gz"
      register: backup

    - name: Save backup modified time
      ansible.builtin.set_fact:
        mtime: "{{ '%Y-%m-%d' | strftime(backup.stat.mtime) }}"
      when: backup.stat.exists

    - name: Perform backup (if not already created today)
      ansible.builtin.command: "./setup.sh -b"
      args:
        chdir: "/home/{{ user }}/ansible-tower-setup-{{ version }}"
      become: yes
      when: mtime != ansible_date_time.date

    - name: Copy backup file to /tmp
      ansible.builtin.copy:
        src: "/home/{{ user }}/ansible-tower-setup-{{ version }}/tower-backup-latest.tar.gz"
        dest: "/tmp/tower-backup-latest.tar.gz"
        remote_src: yes
        mode: u=rw,g=r,o=r
      become: yes

    - name: Upload backup to S3
      amazon.aws.aws_s3:
        bucket: "{{ my_bucket }}"
        src: "/tmp/tower-backup-latest.tar.gz"
        object: "/backups/tower-backup-{{ ansible_date_time.date }}.tar.gz"
        mode: put
        metadata: 'Content-Type=application/x-gzip'